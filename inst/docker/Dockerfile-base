## This creates a Docker image that will make the multiGSEA.shiny::explore()
## application available on http://localhost/multiGSEA
##
## tips: http://tamaszilagyi.com/blog/dockerized-shiny-app-development/

## Start with the base shiny image
FROM rocker/shiny
MAINTAINER Steve Lianoglou (slianoglou@gmail.com)

## install some system dependencies we want our server to have
RUN apt-get update && apt-get install -y \
    gnupg2 \
    libssl-dev \
    libssh2-1-dev \
    libxml2 \
    libxml2-dev \
    libv8-3.14-dev \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/ \
  && rm -rf /tmp/downloaded_packages/ /tmp/*.rds

## multiGSEA and friends dependencies are fully specified in their
## `Depends:` and `Imports:`, so this should suffice:
RUN Rscript -e "source('https://bioconductor.org/biocLite.R'); \
    biocLite(c(\
      'remotes', \
      'statmod', \
      'webdriver', \
      'devtools', \
      'lianos/multiGSEA', \
      'lianos/multiGSEA.shiny', \
      'lianos/GeneSetDb.MSigDB.Hsapiens.v61', \
      'lianos/GeneSetDb.MSigDB.Mmusculus.v61'))" \
  && rm -rf /tmp/downloaded_packages/ /tmp/*.rds

## install phantomjs
RUN Rscript -e "webdriver::install_phantomjs()"

## Copy the shiny application files to a multiGSEA subdirectory of the
## directory that shiny is serving apps from (/srv/shiny-server)
RUN cp -Rf \
  `Rscript -e "cat(system.file('shiny', package = 'multiGSEA.shiny'))"` \
  /srv/shiny-server/multiGSEA
RUN chmod -Rf 755 /srv/shiny-server/multiGSEA

# You then build this, like so:
#
#     $ docker build -f Dockerfile-base -t lianos/multigsea:latest .
#
# Then run it like so:
#
#     $ docker run -d -p 80:3838 --name multigsea lianos/multigsea:latest
#
# You can log into bash prompt of the running container like so:
#
#     $ docker exec -i -t multigsea /bin/bash
#
# And you can acces the multiGSEA shiny app like so:
#
#     http://localhost/multiGSEA
#
# once container is done you can remove it:
#
#     $ docker rm multigsea

